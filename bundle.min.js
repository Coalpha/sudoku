(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var Sudoku = (function (exports) {
    'use strict';

    var areWeDoneYet = (function (s) { return s.matrix.every(function (row) { return row.every(Number.isInteger); }); });

    var getBlockIndex = (function (s, coord) {
        var bx = 0 | coord[0] / s.blockSize;
        var by = 0 | coord[1] / s.blockSize;
        return parseInt("" + by + bx, s.blockSize);
    });

    var parseCellGroup = (function (s, identifier) {
        var id = identifier.split(':');
        return s[(id[0] + "s")][id[1]];
    });

    var option = function (coord, num) { return ({ coord, num }); };
    var dedupeOptionsByNum = function (options) {
        var seen = new Map(); // num to num
        options.forEach(function (option) {
            var num = option.num;
            var seenNum = seen.get(num);
            if (seenNum) {
                seen.set(num, seenNum + 1);
            }
            else {
                seen.set(num, 1);
            }
        });
        return options.filter(function (option) { return seen.get(option.num) === 1; });
    };
    var dedupeOptionsByCoord = function (options) {
        var seen = new Map(); // [num, num] to num
        options.forEach(function (option) {
            var coord = option.coord;
            var seenCoord = seen.get(coord);
            if (seenCoord) {
                seen.set(coord, seenCoord + 1);
            }
            else {
                seen.set(coord, 1);
            }
        });
        return options.filter(function (option) { return seen.get(option.coord) === 1; });
    };
    var place = function (s) { return function (option) {
        var _a = option.coord, x = _a[0], y = _a[1];
        var blockNum = getBlockIndex(s, option.coord);
        var currentBlock = s.blocks[blockNum];
        var currentCol = s.cols[x];
        var currentRow = s.rows[y];
        currentBlock.values.add(option.num);
        currentCol.values.add(option.num);
        currentRow.values.add(option.num);
        s.matrix[y][x] = option.num;
        return [("block:" + blockNum), ("col:" + x), ("row:" + y)];
    }; };
    var getUnique = function (s, pvals) {
        var group = parseCellGroup(s, pvals.group);
        var options = pvals.values.reduce(function (ary, vals, i) { return ary.concat(vals.map(function (val) { return option(group.coords[i], val); })); }, []);
        var placements = dedupeOptionsByNum(options).concat(dedupeOptionsByCoord(options));
        return placements.map(place(s)).reduce(function (arr, v) { return arr.concat(v); }, []);
    };

    var iterateCoords = (function (s, group) {
        var cg = parseCellGroup(s, group);
        var collectionOfPossiVals = cg.coords.map(function (coord) {
            var currentBlock = s.blocks[getBlockIndex(s, coord)];
            var currentRow = s.rows[coord[1]];
            var currentCol = s.cols[coord[0]];
            var currentSet = new Set(currentBlock.values.concat(currentRow.values, currentCol.values));
            return s.allPossibleValues.filter(function (value) { return !currentSet.has(value); });
            // There's no need to re-dedupe this since it was already deduped before
        });
        return ({
            group,
            values: collectionOfPossiVals
        });
    });

    var iterateChanges = (function (s) {
        s.changes = s.changes.map(function (change) { return getUnique(s, iterateCoords(s, change)); }).reduce(function (arr, v) { return arr.concat(v); }, []);
        if (s.changes.length < 1) {
            // either we're done or something did a bad
            if (areWeDoneYet(s)) {
                throw Error('Nothing went wrong!');
            }
            else {
                throw Error('this sudoku is warm and bad');
            }
        }
    });

    var makeCellGroupId = function (type, index) { return (type + ":" + index); };
    var MatrixFactory = function (size) { return Array(size).fill(0).map(function () { return Array(size).fill(null); }); };
    var CellGroup = (function () {
        function CellGroup(identifier, coords) {
            return ({
                identifier,
                coords,
                values: new Set(Array(coords.length).fill(0).map(function (v, i) { return i; }))
            });
        }
        return CellGroup;
    }());
    var Sudoku = (function () {
        function Sudoku(matrix) {
            var _this = this;
            var blockSize = Math.sqrt(matrix.length);
            if (blockSize < 1 || !Number.isInteger(blockSize)) {
                throw Error('The square root of the matrix length must be an integer larger than 0');
            }
            this.blockSize = blockSize;
            this.maxValue = Math.pow(this.blockSize, 2);
            this.totalSize = Math.pow(this.blockSize, 3);
            this.changes = [];
            var aryMaxVal = Array(this.maxValue).fill(0);
            this.allPossibleValues;
            this.blocks = aryMaxVal.map(function (v, blockIdx) {
                var id = makeCellGroupId('block', blockIdx);
                _this.changes.push(id);
                var block = Array(_this.maxValue).fill(0).map(function (_, cellIdx) { return [cellIdx % blockSize, 0 | cellIdx / blockSize]; });
                return new CellGroup(id, block);
            });
            this.rows = aryMaxVal.map(function (v, y) {
                var id = makeCellGroupId('row', y);
                _this.changes.push(id);
                var row = aryMaxVal.map(function (_, x) { return [x, y]; });
                return new CellGroup(id, row);
            });
            this.cols = aryMaxVal.map(function (v, x) {
                var id = makeCellGroupId('col', x);
                _this.changes.push(id);
                var col = aryMaxVal.map(function (_, y) { return [x, y]; });
                return new CellGroup(id, col);
            });
            this.matrix = matrix;
            this.allPossibleValues = aryMaxVal.map(function (v, i) { return i; });
        }
        return Sudoku;
    }());

    window.x = new Sudoku(MatrixFactory(9));

    exports.iterateChanges = iterateChanges;

    return exports;

}({}));
//# sourceMappingURL=bundle.min.js.map
