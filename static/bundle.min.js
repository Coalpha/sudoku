var Sudoku = (function (exports) {
    'use strict';

    var CellGroupType;
    (function (CellGroupType) {
        CellGroupType[CellGroupType["block"] = 0] = "block";
        CellGroupType[CellGroupType["row"] = 1] = "row";
        CellGroupType[CellGroupType["col"] = 2] = "col";
    })(CellGroupType || (CellGroupType = {}));
    var makeCellGroupId = function (type, index) { return (type + ":" + index); };
    var CellGroup = (function () {
        function CellGroup(identifier, coords) {
            return ({
                identifier,
                coords,
                values: new Set(Array(coords.length).fill(0).map(function (v, i) { return i; }))
            });
        }
        return CellGroup;
    }());
    var Sudoku = (function () {
        function Sudoku(size) {
            this.rows = Array(size).fill(0).map(function (v, y) {
                var id = makeCellGroupId(CellGroupType.row, y);
                var row = Array(size).fill(0).map(function (_, x) { return [x, y]; });
                return new CellGroup(id, row);
            });
        }
        return Sudoku;
    }());

    exports.Sudoku = Sudoku;

    return exports;

}({}));
//# sourceMappingURL=bundle.min.js.map
