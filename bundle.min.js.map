{"version":3,"file":"bundle.min.js","sources":["src/areWeDoneYet.ts","src/getUnique.ts","src/parseCellGroup.ts","src/iterateCoords.ts","src/iterateChanges.ts","src/types.ts"],"sourcesContent":["import { Changes, PossibleValuesCollection, Sudoku } from './types';\n\nexport default ((s: Sudoku) : boolean => s.matrix.every(row => row.every(Number.isInteger)));\n","import { Changes, PossibleValuesCollection, Sudoku } from './types';\n\nexport default ((s: Sudoku, possibleValues: PossibleValuesCollection) : Changes => {\n  return [];\n});\n","import { CellGroup, Sudoku } from './types';\n\nexport default ((s: Sudoku, identifier: string) : CellGroup => {\n  const id = identifier.split(':');\n  return s[id[0]][id[1]];\n});\n","import parseCellGroup from './parseCellGroup';\nimport { CellGroup, Coordinate, PossiVals, PossibleValues, Sudoku } from './types';\n\nexport default ((s: Sudoku, group: string) : PossibleValues => {\n  const cg = parseCellGroup(s, group);\n  const collectionOfPossiVals = cg.coords.map((coord: Coordinate) : PossiVals => {\n    const bx = 0 | coord[0] / s.blockSize;\n    const by = 0 | coord[1] / s.blockSize;\n    const currentBlock = s.blocks[parseInt(`${by}${bx}`, s.blockSize)];\n    const currentRow = s.rows[coord[1]];\n    const currentCol = s.cols[coord[0]];\n    const currentSet = new Set([...currentBlock.values, ...currentRow.values, ...currentCol.values]);\n    return s.allPossibleValues.filter((value) => !currentSet.has(value));\n    // There's no need to re-dedupe this since it was already deduped before\n  });\n  return ({\n    group,\n    values: collectionOfPossiVals,\n  });\n});\n","import areWeDoneYet from './areWeDoneYet';\nimport getUnique from './getUnique';\nimport iterateCoords from './iterateCoords';\nimport map from './map';\nimport pipe from './pipe';\nimport { Sudoku } from './types';\nexport default ((s: Sudoku) : void => {\n  const PossibleValuesCollection = s.changes.map(change => iterateCoords(s, change));\n  s.changes = getUnique(s, PossibleValuesCollection);\n  if (s.changes.length < 1) {\n    // either we're done or something did a bad\n    if (areWeDoneYet(s)) {\n      throw Error('Nothing went wrong!');\n    } else {\n      throw Error('this sudoku is warm and bad');\n    }\n  }\n});\n","type CellGroupType = 'block'\n  | 'row'\n  | 'col';\ntype Matrix = Array<Array<number|void>>;\nexport type PossiVals = Array<number>; // the possible values for one cell\nexport type Changes = Array<string>;\nexport interface Coordinate {\n  [index: number]: number;\n}\nexport interface ArrayFunction<T> {\n  (ary: Array<any>): Array<T>;\n}\nexport interface PossibleValues { // the possible values for an entire CellGroup\n  group: string;\n  values: Array<PossiVals>;\n}\nexport type PossibleValuesCollection = Array<PossibleValues>;\nexport const makeCellGroupId = (type: CellGroupType, index: number) : string => `${type}:${index}`;\nexport const MatrixFactory = (size: number) : Matrix => Array(size).fill(0).map(() => Array(size).fill(null));\nexport class CellGroup {\n  identifier: string;\n  values: Set<number>;\n  coords: Array<Coordinate>\n  constructor(identifier: string, coords: Array<Coordinate>) {\n    return ({\n      identifier,\n      coords,\n      values: new Set(Array(coords.length).fill(0).map((v, i) => i)),\n    });\n  }\n}\nexport class Sudoku {\n  blockSize: number;\n  maxValue: number;\n  totalSize: number;\n  blocks: Array<CellGroup>;\n  rows: Array<CellGroup>;\n  cols: Array<CellGroup>;\n  changes: Changes;\n  matrix: Array<Array<number>>;\n  allPossibleValues: Array<number>;\n\n  constructor(blockSize = 3, matrix: Matrix) {\n    this.blockSize = matrix.length;\n    this.maxValue = blockSize ** 2;\n    this.totalSize = blockSize ** 3;\n    this.changes = [];\n    const aryMaxVal = Array(this.maxValue).fill(0);\n    this.allPossibleValues\n\n    this.blocks = aryMaxVal.map((v, blockIdx) => {\n      const id = makeCellGroupId('block', blockIdx);\n      this.changes.push(id);\n      const block = Array(this.maxValue).fill(0).map((_, cellIdx) => [cellIdx % blockSize, 0 | cellIdx / blockSize]);\n      return new CellGroup(id, block);\n    });\n    this.rows = aryMaxVal.map((v, y) => {\n      const id = makeCellGroupId('row', y);\n      this.changes.push(id);\n      const row = aryMaxVal.map((_, x) => [x, y]);\n      return new CellGroup(id, row);\n    });\n    this.cols = aryMaxVal.map((v, x) => {\n      const id = makeCellGroupId('col', x);\n      this.changes.push(id);\n      const col = aryMaxVal.map((_, y) => [x, y]);\n      return new CellGroup(id, col);\n    });\n    this.matrix = matrix || MatrixFactory(this.totalSize);\n    this.allPossibleValues = aryMaxVal.map((v, i) => i);\n  }\n}\n"],"names":[],"mappings":"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"}